apply plugin: 'com.android.library'

String src_main = 'src/main'
String src_test = 'src/test'

def getPropertyOrDefault = {
  String property, Object fallback ->
    if (hasProperty(property)) {
      return getProperty(property)
    } else {
      return fallback
    }
}

android {
  compileSdkVersion getPropertyOrDefault('compileSdkVersion', 23)
  buildToolsVersion getPropertyOrDefault('buildToolsVersion', '23.0.2')

  defaultConfig {
    minSdkVersion getPropertyOrDefault('minSdkVersion', 14)
    targetSdkVersion getPropertyOrDefault('targetSdkVersion', 23)
    consumerProguardFiles 'consumer-proguard-rules.txt'
  }
  sourceSets {
    main {
      manifest.srcFile 'AndroidManifest.xml'
      java.srcDirs = ["$src_main/java"]
      res.srcDirs = ["$src_main/res"]
      assets.srcDirs = ["$src_main/assets"]
    }
    tests {
      manifest.srcFile 'AndroidManifest.xml'
      java.srcDirs = ["$src_test/java"]
      res.srcDirs = ["$src_test/res"]
      assets.srcDirs = ["$src_test/assets"]
    }
  }
}

dependencies {
  compile "com.android.support:support-annotations:$supportLibrary"
  compile 'org.jetbrains:annotations-java5:15.0'
  compile 'com.squareup.okhttp3:okhttp:3.2.0'
  compile 'com.squareup.okhttp:okhttp:2.7.5'
  testCompile 'org.robolectric:robolectric:3.1'
  testCompile 'junit:junit:4.12'
  testCompile 'org.easytesting:fest-assert-core:2.0M10'
  testCompile 'org.mockito:mockito-core:1.9.5'
}
